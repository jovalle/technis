- name: get primary interface name
  set_fact:
    target_interface: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] | default('eth0') }}"

- name: deploy raspberry pi changes
  include_tasks: rpi.yaml
  when: ansible_architecture | regex_search('arm|aarch')

- name: deploy debian changes
  include_tasks: debian.yaml
  when: ansible_distribution == 'Debian'

- name: deploy ubuntu server changes
  include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'

- name: apt upgrade
  block:
    - name: attempt 1st upgrade
      apt:
        upgrade: full
        update_cache: true
        cache_valid_time: 3600
        force_apt_get: true
        autoclean: true
        autoremove: true
      register: apt_upgrade
      until: apt_upgrade is success
      when: apt_upgrade | default(false) | bool
  rescue:
    - name: attempt to rectify apt interruption
      shell: dpkg --configure -a
      ignore_errors: true
      register: dpkg_configure
    - name: assume broken dependency
      shell: apt --fix-broken install -y
      when: dpkg_configure.rc != 0
    - name: attempt 2nd upgrade
      apt:
        upgrade: full
        update_cache: true
        cache_valid_time: 3600
        force_apt_get: true
        autoclean: true
        autoremove: true
      register: apt_upgrade
      until: apt_upgrade is success

- name: install common apt packages
  apt:
    name: "{{ common_packages_apt }}"
    install_recommends: false
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: true
    autoremove: true
  register: apt_install_common
  until: apt_install_common is success

- name: install ubuntu specific apt packages
  apt:
    name: "{{ common_packages_apt_ubuntu }}"
    install_recommends: false
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: true
    autoremove: true
  register: apt_install_ubuntu
  until: apt_install_ubuntu is success
  when:
    - ansible_distribution == "Ubuntu"

- name: install debian specific apt packages
  apt:
    name: "{{ common_packages_apt_debian }}"
    install_recommends: false
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: true
    autoremove: true
  register: apt_install_debian
  until: apt_install_debian is success
  when:
    - ansible_distribution == "Debian"

- name: set hostname
  shell: |
    echo "{{ inventory_hostname }}" > /etc/hostname
    hostname {{ inventory_hostname }}
    hostnamectl set-hostname {{ inventory_hostname }}

- name: clean up lingering hostname entries
  lineinfile:
    path: /etc/hosts
    regex: "^127.0.0.1(.*){{ hostvars[inventory_hostname]['ansible_hostname'] }}(.*)$"
    state: absent
  when: infrastructure_provisioner | default('none') != 'vagrant'

- name: set node aliases in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "127.0.0.1 {{ hostvars[inventory_hostname]['ansible_hostname'] }}.{{ lan_domain }} {{ hostvars[inventory_hostname]['ansible_hostname'] }}"
    insertbefore: BOF
  when: infrastructure_provisioner | default('none') != 'vagrant'

- name: set cluster nodes aliases in /etc/hosts
  lineinfile:
    path: /etc/hosts
    regex: "^{{ hostvars[item]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}(.*)$"
    line: "{{ hostvars[item]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}      {{ hostvars[item]['ansible_hostname'] }}.{{ lan_domain }} {{ hostvars[item]['ansible_hostname'] }}"
  with_items:
    - "{{ groups.all }}"
  when: infrastructure_provisioner | default('none') == 'vagrant'

# Refresh facts and print new hostname
- setup:
- debug: var=ansible_fqdn

- name: disable swap in /etc/fstab
  replace:
    dest: /etc/fstab
    regexp: '^(.*swap.*)'
    replace: '#\1'

- name: disable swap
  command: swapoff -a

- name: enable kernel modules
  modprobe:
    name: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: enable kernel modules at boot
  lineinfile:
    path: /etc/modules
    regex: "^{{ item }}"
    line: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: tweak kernel
  sysctl:
    name: '{{ item.param }}'
    value: '{{ item.value }}'
    state: present
    reload: true
  loop:
    - { param: fs.inotify.max_queued_events, value: 16384 }
    - { param: fs.inotify.max_user_instances, value: 1280 }
    - { param: fs.inotify.max_user_watches, value: 655360 }
    - { param: kernel.pid_max, value: 131072 }
    - { param: net.ipv4.ip_forward, value: 1 }
    - { param: net.ipv6.conf.all.forwarding, value: 1 }
    - { param: net.ipv6.conf.all.accept_ra, value: 2 }
    - { param: net.bridge.bridge-nf-call-iptables, value: 1 }
    - { param: net.bridge.bridge-nf-call-ip6tables, value: 1 }
    - { param: kernel.printk, value: '2       4       1       7' }

- name: create ~/.ssh dir if missing
  file:
    path: ~/.ssh
    mode: 0700
    state: directory
  when:
    - ssh_public_key is defined
    - ssh_private_key is defined

- name: create ~/.ssh/authorized_keys if missing
  file:
    path: ~/.ssh/authorized_keys
    state: touch
    mode: 0600
  when: ssh_public_key is defined

- name: allow public SSH key for administration
  lineinfile:
    path: ~/.ssh/authorized_keys
    line: "{{ ssh_public_key | trim }}"
  when: ssh_public_key is defined

- name: render SSH key for host to host
  copy:
    content: "{{ ssh_private_key }}"
    dest: ~/.ssh/id_rsa
    mode: 0600
  when: ssh_private_key is defined

- name: allow password auth
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^(#*)PasswordAuthentication no"
    line: "PasswordAuthentication yes"
  notify: restart ssh

- name: allow root login
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^(#*)PermitRootLogin.*"
    line: "PermitRootLogin yes"
  notify: restart ssh

- name: configure sshd jail
  copy:
    content: |
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      findtime = 300
      bantime = 3600
      ignoreip = 127.0.0.1 {{ lan_network | default('192.168.1.0/24') }}
    dest: /etc/fail2ban/jail.local
  notify: restart fail2ban

# Generate a hash via:
#   docker run --rm -it jovalle/mkpasswd
- name: set root password if defined
  user:
    name: root
    password: "$6$rounds=4096$aEPEL1bIDTcZ$YnEvgJKmQrHnyF.OmpdSasUjxwtqn2C1CugUUAyGq9GGI/B3Qz9CTcuj2G/L5uxNhidEd7jXynNXVzZfJm2YB."

- name: personal touch
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: "{{ item }}"
  loop:
    - set -o vi
    - export EDITOR=vim
    - alias k=kubectl

- name: request reboot
  debug:
    msg: "Requesting a reboot"
  changed_when: true
  notify:
    - reboot host
    - wait for ssh
  when: reboot | default(false) | bool

- name: flush handler calls for immediate effect
  meta: flush_handlers
