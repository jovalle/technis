---

- name: Install packages
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - frr
      - lldpd

- name: Enable kernel modules
  community.general.modprobe:
    name: "{{ item }}"
  loop:
    - thunderbolt
    - thunderbolt-net

- name: Enable modules
  ansible.builtin.lineinfile:
    path: /etc/modules
    line: "{{ item }}"
  loop:
    - thunderbolt
    - thunderbolt-net

- name: Assign thunderbolt interfaces
  ansible.builtin.copy:
    content: |
      [Match]
      Path={{ item.path }}
      Driver=thunderbolt-net
      [Link]
      MACAddressPolicy=none
      Name={{ item.name }}
    dest: /etc/systemd/network/{{ item.name }}.link
    mode: '0644'
  loop:
    - { name: thunderbolt0, path: pci-0000:00:0d.2 }
    - { name: thunderbolt1, path: pci-0000:00:0d.3 }

- name: Retrieve list of physical network interfaces
  command: >
    find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n'
  register: physical_interfaces
  changed_when: false

- name: Filter interfaces starting with 'enp'
  set_fact:
    enp_interfaces: "{{ physical_interfaces.stdout_lines | select('match', '^enp.*') | list | sort }}"

- name: Determine primary 'enp' interface
  set_fact:
    primary_enp_interface: "{{ enp_interfaces[0] if enp_interfaces | length > 0 else 'No enp interface found' }}"

- name: Set interfaces
  ansible.builtin.copy:
    content: |
      auto lo
      iface lo inet loopback

      auto lo:0
      iface lo:0 inet static
              address 192.168.144.{{ groups['proxmox'].index(inventory_hostname) + 1 }}/32

      iface {{ primary_enp_interface }} inet manual

      auto vmbr0
      iface vmbr0 inet static
              address {{ ansible_default_ipv4.address }}/24
              gateway 192.168.31.1
              bridge-ports {{ primary_enp_interface }}
              bridge-stp off
              bridge-fd 0

      auto thunderbolt0
      iface thunderbolt0 inet manual
              mtu 65520

      auto thunderbolt1
      iface thunderbolt1 inet manual
              mtu 65520

      source /etc/network/interfaces.d/*
    dest: /etc/network/interfaces
    mode: '0644'
  notify: Restart networking

- name: Set udev rules
  ansible.builtin.copy:
    content: |
      SUBSYSTEM=="net", KERNEL=="thunderbolt0", RUN+="/usr/sbin/ip link set dev thunderbolt0 up"
      SUBSYSTEM=="net", KERNEL=="thunderbolt1", RUN+="/usr/sbin/ip link set dev thunderbolt1 up"
    dest: /etc/udev/rules.d/10-thunderbolt.rules
    mode: '0644'
  notify:
    - Update initramfs

- name: Get link details
  ansible.builtin.command:
    cmd: ip link show
  changed_when: false
  register: link_details

- name: Print link details
  ansible.builtin.debug:
    var: link_details.stdout_lines

- name: Enable IP forwarding
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
    reload: true
  loop:
    - net.ipv4.ip_forward

- name: Disable IPv6 for greater stability
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
    reload: true
  loop:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6

- name: Disable MEBx interfaces
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/disable-igc.conf
    line: "blacklist igc"
    state: present
    create: true
    mode: '0644'
  notify: Reboot host

- name: Enable fabricd
  ansible.builtin.lineinfile:
    path: /etc/frr/daemons
    regexp: '^fabricd=no'
    line: 'fabricd=yes'
  register: frr_daemons
  notify: Restart FRR

- name: Configure FRR for Openfabric peering
  ansible.builtin.copy:
    content: |
      frr version 8.5.2
      frr defaults traditional
      hostname {{ inventory_hostname }}
      log syslog informational
      service config
      !
      interface thunderbolt0
      ip router openfabric 1
      exit
      !
      interface thunderbolt1
      ip router openfabric 1
      exit
      !
      interface lo
      ip router openfabric 1
      openfabric passive
      exit
      !
      router openfabric 1
      net 49.0000.0000.000{{ groups['proxmox'].index(inventory_hostname) + 1 }}.00
      exit
      !
      end
    dest: /etc/frr/frr.conf
    mode: '0640'
  notify: Restart FRR

- name: Push rebolt files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
    - { src: 'rebolt.sh', dest: '/usr/local/bin/rebolt.sh', mode: '755' }
    - { src: 'rebolt.service', dest: '/etc/systemd/system/rebolt.service', mode: '644' }
    - { src: 'rebolt.timer', dest: '/etc/systemd/system/rebolt.timer', mode: '644' }
  notify:
    - Start rebolt timer

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Select a random other node
  ansible.builtin.set_fact:
    peer_node: "{{ groups['proxmox'] | difference([inventory_hostname]) | random }}"

- name: Wait a few for the network to stabilize
  ansible.builtin.pause:
    seconds: 30

- name: Show openfabric topology
  ansible.builtin.command:
    cmd: vtysh -c "show openfabric topology"
  changed_when: false
  register: show_openfabric_topology
  retries: 6
  delay: 20
  until: show_openfabric_topology.stdout is search(peer_node)
  tags:
    - check

- name: Print openfabric topology
  ansible.builtin.debug:
    var: show_openfabric_topology.stdout_lines
  tags:
    - check

- name: Collect all IPv4 addresses from all interfaces
  ansible.builtin.set_fact:
    host_ips: >-
      {{ ansible_facts | dict2items |
         selectattr('key', 'match', '^ansible_.*') |
         selectattr('value', 'mapping') |
         selectattr('value.ipv4', 'defined') |
         map(attribute='value.ipv4.address') |
         list |
         union(ansible_all_ipv4_addresses) |
         unique |
         list }}

- name: Collect all IPv4 addresses from all hosts
  ansible.builtin.set_fact:
    all_ips: "{{ groups['proxmox'] | map('extract', hostvars, ['host_ips']) | flatten | unique | list }}"

- name: Create list of IPs to ping (excluding own IPs)
  ansible.builtin.set_fact:
    ips_to_ping: "{{ all_ips | difference(host_ips) }}"

- name: Ping other hosts
  ansible.builtin.command: ping -c 1 {{ item }}
  changed_when: false
  loop: "{{ ips_to_ping }}"
