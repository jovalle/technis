- name: clean previous runs of k3s-init
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: clean previous runs of k3s-init
  command: systemctl reset-failed k3s-init
  failed_when: false
  changed_when: false

- name: create manifests directory on new cluster
  file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    owner: root
    group: root
    mode: 0644
  when:
    - inventory_hostname == groups['control_plane'][0]

- name: bootstrap core components
  template:
    src: "{{ item }}.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/{{ item }}.yaml"
    owner: root
    group: root
    mode: 0644
  with_items:
    - cilium
  when:
    - inventory_hostname == groups['control_plane'][0]

- debug:
    msg: systemd-run -p RestartSec=2 -p Restart=on-failure --unit=k3s-init -description="k3s-init" k3s server {{ server_init_args }}

- name: init cluster inside the transient k3s-init service
  shell: |
    systemd-run -p RestartSec=2 -p Restart=on-failure --unit=k3s-init --description="k3s-init" k3s server {{ server_init_args }}
  args:
    creates: /etc/systemd/system/k3s.service

- name: verification
  block:
    - name: verify that all nodes actually joined (check k3s-init.service if this fails)
      shell: k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['control_plane'] | length)
      retries: 20
      delay: 10
      changed_when: false
  always:
    - name: kill the temporary service used for initialization
      systemd:
        name: k3s-init
        state: stopped
      failed_when: false

- name: render k3s service file
  template:
    src: k3s.service.j2
    dest: /etc/systemd/system/k3s.service
    owner: root
    group: root
    mode: 0644
  register: k3s_service

- name: enable and restart k3s service
  systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true
  when: k3s_service.changed

- name: create k3s symlinks
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/{{ item }}
    state: link
    force: true
  with_items:
    - kubectl
    - crictl
    - ctr

- name: wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: register node-token file
  stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: change file access node-token
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: read node-token from control plane node
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: store control plane node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: restore node-token file access
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: true
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: configure kubectl cluster to https://{{ apiserver_endpoint }}:6443
  command: >-
    k3s kubectl config set-cluster default
      --server=https://{{ apiserver_endpoint }}:6443
      --kubeconfig ~{{ ansible_user }}/.kube/config
  changed_when: true

- name: get contents of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: get sub dirs of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: clean up bootstrapping manifests
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ k3s_server_manifests.files }}"
    - "{{ k3s_server_manifests_directories.files }}"
  loop_control:
    label: "{{ item.path }}"