kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: keel
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
      - extensions
      - apps
      - batch
    resources:
      - pods
      - replicasets
      - replicationcontrollers
      - statefulsets
      - deployments
      - daemonsets
      - jobs
      - cronjobs
    verbs:
      - get
      - delete # required to delete pods during force upgrade of the same tag
      - watch
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods/portforward
    verbs:
      - get
      - create
      - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: keel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: keel
subjects:
  - kind: ServiceAccount
    name: keel
    namespace: kube-system
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: keel
  namespace: kube-system
  labels:
    app: keel
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: keel
  namespace: kube-system
  annotations:
    keel.sh/policy: all
    keel.sh/trigger: poll
    keel.sh/pollSchedule: "0 1 * * *"
  labels:
    app: keel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keel
  template:
    metadata:
      labels:
        app: keel
    spec:
      serviceAccountName: keel
      containers:
        - name: keel
          image: keelhq/keel:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/keel"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # Basic auth (to enable UI/API)
            - name: BASIC_AUTH_USER
              value: "admin"
            - name: BASIC_AUTH_PASSWORD
              # value: "admin"
              valueFrom: # kubectl -n keel create secret generic credentials --from-literal=password='noneya'
                secretKeyRef:
                  name: keel
                  key: password
            - name: AUTHENTICATED_WEBHOOKS
              value: "false"
            - name: NOTIFICATION_LEVEL
              value: "info"
          ports:
            - containerPort: 9300
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9300
            initialDelaySeconds: 30
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
---
kind: Service
apiVersion: v1
metadata:
  name: keel
  namespace: kube-system
  labels:
    app: keel
spec:
  ports:
    - port: 9300
      protocol: TCP
      name: keel
  selector:
    app: keel
  sessionAffinity: None
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: keel
  namespace: kube-system
  labels:
    app: keel
spec:
  rules:
    - host: keel.techn.is
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: keel
                port:
                  number: 9300
