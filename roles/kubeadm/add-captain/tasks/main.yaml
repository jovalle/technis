- name: sync kubernetes certs
  shell: rsync -az -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" {{ groups.control_plane[0] }}:/etc/kubernetes/pki /etc/kubernetes
  when: inventory_hostname in groups['control_plane'][1:]

- name: render config.yaml
  template:
    src: config.yaml.j2
    dest: "/etc/kubernetes/config.yaml"

- name: enable kubelet service
  systemd:
    name: kubelet
    state: started
    enabled: yes
  register: kubelet

- name: get service facts
  service_facts:
  register: services

- name: kubeadm init
  command: kubeadm init --config=/etc/kubernetes/config.yaml
  when:
  - services.ansible_facts.services['kubelet.service'].state == 'stopped'
  - services.ansible_facts.services['kubelet.service'].status == 'enabled'

- name: create kubectl config dir
  file:
    path: ~/.kube
    state: directory

- name: check config.yaml produced
  stat:
    path: /etc/kubernetes/admin.conf
  register: config

- fail:
    msg: Config not generated. Is kubelet running? Cannot proceed.
  when: not config.stat.exists

- name: copy generated admin.conf
  command: cp /etc/kubernetes/admin.conf ~/.kube/config
  when: config.stat.exists

- name: validate initialization via labels
  block:
  - name: check labels
    command: kubectl get node {{ inventory_hostname }} -o custom-columns=ROLES:.metadata.labels --no-headers
    register: node_labels
    ignore_errors: yes
  - name: set labels
    command: kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/master=
    when: '"node-role.kubernetes.io/master" not in node_labels.stdout'
    ignore_errors: yes
  run_once: yes
  when: inventory_hostname is groups['control_plane'][0]