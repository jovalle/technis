# Source: https://kube-vip.io/manifests/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: system:kube-vip-role
rules:
  - apiGroups: [""]
    resources: ["services", "services/status", "nodes"]
    verbs: ["list","get","watch", "update"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["list", "get", "watch", "update", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:kube-vip-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-vip-role
subjects:
- kind: ServiceAccount
  name: kube-vip
  namespace: kube-system
--- # Source: https://kube-vip.io/docs/installation/daemonset/#example-bgp-manifest
apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  name: kube-vip-ds
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: kube-vip-ds
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: kube-vip-ds
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
      containers:
      - args:
        - manager
        env:
        - name: vip_arp
          value: "{{ 'true' if (kube_vip_mode | default('arp') == 'arp') else 'false' }}"
        - name: port
          value: "6443"
        - name: vip_interface
          value: "eth0"
        - name: vip_cidr
          value: "32"
        - name: cp_enable
          value: "true"
        - name: cp_namespace
          value: kube-system
        - name: vip_ddns
          value: "false"
        - name: svc_enable
          value: "true"
{% if kube_vip_mode | default('arp') == 'bgp' %}
        - name: bgp_enable
          value: "true"
        - name: bgp_routerinterface
          value: "eth0"
        - name: bgp_routerid
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: bgp_as
          value: "{{ kube_vip_bgp_asn }}"
        - name: bgp_peeraddress
        - name: bgp_peerpass
        - name: bgp_peeras
          value: "{{ kube_vip_bgp_peer_asn }}"
        - name: bgp_peers
          value: "{{ kube_vip_bgp_peer_ip }}:{{ kube_vip_bgp_peer_asn }}::false"
{% endif %}
        - name: address
          value: "{{ kube_vip_address }}"
        image: ghcr.io/kube-vip/kube-vip:{{ kube_vip_version }}
        imagePullPolicy: Always
        name: kube-vip
        resources: {}
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            - SYS_TIME
      hostNetwork: true
      serviceAccountName: kube-vip
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
  updatestrategy: {}
status:
  currentnumberscheduled: 0
  desirednumberscheduled: 0
  numbermisscheduled: 0
  numberready: 0
