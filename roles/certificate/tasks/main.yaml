- name: ensure target_dir exists
  file:
    path: "{{ target_dir }}"
    state: directory

- name: check CA cert
  stat:
    path: "{{ target_dir }}/{{ cert_ca_id | default('ca') }}.pem"
  register: ca
  when: cert_profile != 'ca' and cert_ca_id is defined

- name: check target cert
  stat:
    path: "{{ target_dir }}/{{ cert_id | default('test') }}.pem"
  register: crt

# using shell module while fetch/copy remain useless
- name: get CA cert for generating target cert ({{ cert_id }})
  shell: |
    rsync -e "ssh -o StrictHostKeyChecking=no" {{ cert_ca_host }}:{{ item.src }} {{ item.dest }}
  with_items:
  - { src: "{{ src_dir | default(target_dir) }}/{{ cert_ca_id }}.pem", dest: "{{ target_dir }}/{{ cert_ca_id }}.pem" }
  - { src: "{{ src_dir | default(target_dir) }}/{{ cert_ca_id }}-key.pem", dest: "{{ target_dir }}/{{ cert_ca_id }}-key.pem" }
  when: cert_ca_id is defined and ca.stat.exists == False

- name: generate cert
  block:
  - name: render config files
    template:
      src: "{{ item }}.j2"
      dest: "{{ target_dir }}/{{ item }}"
    with_items:
    - csr.json
    - config.json
  - name: "generate ca cert"
    shell: |
      cfssl gencert \
      -initca {{ target_dir }}/csr.json | cfssljson \
      -bare {{ target_dir }}/{{ cert_id }} -
    when: cert_profile == 'ca' and cert_ca_id is not defined
    delegate_to: "{{ cert_ca_host | default(inventory_hostname) }}"
    run_once: yes
  - name: "generate cert for {{ cert_id }}"
    shell: |
      cfssl gencert \
      --ca={{ target_dir }}/{{ cert_ca_id }}.pem \
      --ca-key={{ target_dir }}/{{ cert_ca_id }}-key.pem \
      --config={{ target_dir }}/config.json \
      --hostname={{ cert_hostname | default("") }} \
      --profile={{ cert_profile | default("") }} \
      {{ target_dir }}/csr.json | cfssljson --bare {{ target_dir }}/{{ cert_id }}
    when: cert_profile != 'ca' and cert_ca_id is defined
  always:
  - name: "cleanup config files"
    file:
      path: "{{ target_dir }}/{{ item }}"
      state: absent
    with_items:
    - csr.json
    - config.json
  when: crt.stat.exists == False and cert_id is defined

- name: "validate cert for {{ cert_id }}"
  block:
  - name: "generate modulus of public certificate for {{ cert_id }}"
    shell: "openssl x509 -modulus -noout -in {{ target_dir }}/{{ cert_id }}.pem | openssl md5"
    no_log: yes
    register: crt_mod
  - name: "generate modulus of private key for {{ cert_id }}"
    shell: "openssl rsa -modulus -noout -in {{ target_dir }}/{{ cert_id }}-key.pem | openssl md5"
    no_log: yes
    register: key_mod
  - name: "validate private key matches certificate for {{ cert_id }}"
    debug:
      msg: "Comparing {{ crt_mod.stdout }} to {{ key_mod.stdout }}"
    failed_when: crt_mod.stdout != key_mod.stdout
  when: cert_id is defined