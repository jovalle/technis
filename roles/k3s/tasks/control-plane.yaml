- name: clean previous runs of k3s-init
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: clean previous runs of k3s-init
  command: systemctl reset-failed k3s-init
  failed_when: false
  changed_when: false
  args:
    warn: false  # The ansible systemd module does not support reset-failed

- name: create manifests directory on first control plane node
  file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    owner: root
    group: root
    mode: 0644
  when: inventory_hostname == groups['control_plane'][0]

- name: copy vip rbac manifest to first control plane node
  template:
    src: "vip.rbac.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/vip.rbac.yaml"
    owner: root
    group: root
    mode: 0644
  when: inventory_hostname == groups['control_plane'][0]

- name: copy vip manifest to first control plane node
  template:
    src: "vip.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/vip.yaml"
    owner: root
    group: root
    mode: 0644
  when: inventory_hostname == groups['control_plane'][0]

- name: copy traefik custom config on first control plane node
  copy:
    content: |
      apiVersion: helm.cattle.io/v1
      kind: HelmChartConfig
      metadata:
        name: traefik
        namespace: kube-system
      spec:
        valuesContent: |-
          ports:
            web:
              redirectTo: websecure
          service:
            enabled: true
            type: LoadBalancer
            spec:
              loadBalancerIP: "{{ ingress_endpoint | default('192.168.1.200') }}"
    dest: /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
  when: inventory_hostname == groups['control_plane'][0]

- name: init cluster inside the transient k3s-init service
  command:
    cmd: "systemd-run -p RestartSec=2 \
                      -p Restart=on-failure \
                      --unit=k3s-init \
                      k3s server {{ server_init_args }}"
    creates: "/etc/systemd/system/k3s.service"
  args:
    warn: false  # The ansible systemd module does not support transient units

- name: verification
  block:
    - name: verify that all nodes actually joined (check k3s-init.service if this fails)
      command:
        cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['control_plane'] | length)
      retries: 20
      delay: 10
      changed_when: false
  always:
    - name: kill the temporary service used for initialization
      systemd:
        name: k3s-init
        state: stopped
      failed_when: false

- name: render k3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "/etc/systemd/system/k3s.service"
    owner: root
    group: root
    mode: 0644

- name: enable and restart k3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes

- name: wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: register node-token file
  stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: change file access node-token
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: read node-token from control plane node
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: store control plane node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: restore node-token file access
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: configure kubectl cluster to https://{{ apiserver_endpoint }}:6443
  command: >-
    k3s kubectl config set-cluster default
      --server=https://{{ apiserver_endpoint }}:6443
      --kubeconfig ~{{ ansible_user }}/.kube/config
  changed_when: true

- name: create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link