{% if k8s_difficulty_mode == 'hard' %}
# Source: https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
nodeRegistration:
  name: "{{ inventory_hostname }}"
{% if container_runtime == 'docker' %}
  criSocket: "/var/run/dockershim.sock"
{% else %}
  criSocket: "/run/containerd/containerd.sock"
{% endif %}
  taints:
  - key: "kubeadmNode"
    value: "master"
    effect: "NoSchedule"
  kubeletExtraArgs:
{% if container_runtime == 'docker' %}
    cgroup-driver: "systemd"
{% else %}
    cgroup-driver: "cgroupfs"
{% endif %}
  ignorePreflightErrors:
  - IsPrivilegedUser
localAPIEndpoint:
  advertiseAddress: "{{ hostvars[inventory_hostname]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}"
  bindPort: {{ k8s_api_port }}
---
{% endif %}
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
etcd:
{% if k8s_difficulty_mode == 'hard' or cluster_etcd_mode == 'external' %}
  external:
    endpoints:
{% for i in groups['etcd'] %}
    - https://{{ hostvars[i]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}:2379
{% endfor %}
    caFile: "/etc/kubernetes/pki/etcd-ca.pem"
    certFile: "/etc/kubernetes/pki/apiserver-etcd-client.pem"
    keyFile: "/etc/kubernetes/pki/apiserver-etcd-client-key.pem"
{% else %}
  local:
{% if cluster_sans | length > 0 %}
    serverCertSANs:
{% for san in cluster_sans %}
    - {{ san }}
{% endfor%}
{% for san in cluster_extra_sans %}
    - {{ san }}
{% endfor%}
{% endif %}
    dataDir: "/var/lib/etcd"
    extraArgs:
      client-cert-auth: "true"
      peer-client-cert-auth: "true"
      peer-auto-tls: "false"
      heartbeat-interval: "100"
      election-timeout: "1000"
{% endif %}
networking:
  dnsDomain: cluster.local
{%  if cluster_service_subnet | ipaddr %}
  serviceSubnet: {{ cluster_service_subnet }}
{% endif %}
{%  if cluster_pod_subnet | ipaddr %}
  podSubnet: {{ cluster_pod_subnet }}
{% endif %}
{% if k8s_version is defined %}
kubernetesVersion: {{ k8s_version }}
{% endif %}
clusterName: {{ cluster_name }}
certificatesDir: /etc/kubernetes/pki
controlPlaneEndpoint: {{ cluster_control_plane_endpoint }}
apiServer:
{% if cluster_sans | length > 0 %}
  certSANs:
{% for san in cluster_sans %}
  - {{ san }}
{% endfor%}
{% for extra_san in cluster_extra_sans %}
  - {{ extra_san }}
{% endfor%}
{% endif %}
  extraArgs:
    audit-log-path: "/var/log/kubernetes/audit.log"
    audit-log-maxage: "30"
    audit-log-maxbackup: "10"
    audit-log-maxsize: "100"
    authorization-mode: "Node,RBAC"
    enable-admission-plugins: "NodeRestriction,AlwaysPullImages"
    insecure-port: "0"
    kubelet-https: "true"
    profiling: "false"
    request-timeout: "1m0s"
    secure-port: "6443"
    service-account-lookup: "true"
    tls-cipher-suites: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
  timeoutForControlPlane: "4m0s"
imageRepository: {{ cluster_image_repository }}
controllerManager:
  extraArgs:
    bind-address: 127.0.0.1
    terminated-pod-gc-threshold: "50"
    profiling: "false"
    use-service-account-credentials: "true"
    feature-gates: "RotateKubeletServerCertificate=true"
scheduler:
  extraArgs:
    bind-address: 127.0.0.1
    profiling: "false"