- name: determine kubectl delegate
  block: # avoiding jinja2 templating warning
    - name: delegate to first control plane host
      set_fact:
        kubectl_delegate: "{{ groups['control_plane'][0] }}"
      when: >
        groups['control_plane'] | length == 1 or
        inventory_hostname != groups['control_plane'][0]

    - name: delegate to another when target is default
      set_fact:
        kubectl_delegate: "{{ groups['control_plane'][1] }}"
      when:
        - groups['control_plane'] | length > 1
        - inventory_hostname == groups['control_plane'][0]

- name: prepare node for reset
  block:
    - name: check for node
      command: kubectl get node {{ inventory_hostname }}
      register: get_node

    - name: drain node
      command: kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-emptydir-data
      when: get_node.rc == 0

  ignore_errors: yes
  delegate_to: "{{ kubectl_delegate }}"

- name: revert cluster deployment
  shell: kubeadm reset -f
  ignore_errors: yes

- name: stop kubelet
  systemd:
    name: kubelet
    state: stopped
    enabled: no
  ignore_errors: yes

- name: reset cni
  import_role:
    name: cni/reset

- name: reset cri
  import_role:
    name: cri/reset

- name: remove packages
  apt:
    name: "{{ item }}"
    state: absent
    autoclean: yes
    autoremove: yes
    force: yes
    purge: yes
    update_cache: yes
  with_items:
    - kubeadm
    - kubectl
    - kubelet
    - kubernetes-cli

- name: remove artifacts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/kubernetes
    - /etc/systemd/system/kubelet.service.d
    - /var/lib/etcd
    - /var/lib/kubelet

- name: delete node {{ inventory_hostname }}
  command: kubectl delete node {{ inventory_hostname }} --ignore-not-found=true
  delegate_to: "{{ groups['control_plane'][0] }}"
  ignore_errors: yes
  when: get_node.rc == 0