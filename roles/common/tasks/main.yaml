- name: apt upgrade
  apt:
    upgrade: full
    update_cache: yes
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: yes
    autoremove: yes
  register: apt_upgrade
  retries: 5
  until: apt_upgrade is success
  when: apt_upgrade | default(False) | bool

- name: install common apt packages
  apt:
    name: "{{ common_packages_apt }}"
    install_recommends: false
    update_cache: yes
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: yes
    autoremove: yes
  register: apt_install_common
  retries: 5
  until: apt_install_common is success

- name: install common pip packages
  pip:
    name: "{{ common_packages_pip }}"
  register: pip_install_common
  retries: 5
  until: pip_install_common is success

- name: cleanup netplans
  file:
    path: "/etc/netplan/{{ item }}"
    state: absent
  with_items:
    - 00-installer-config.yaml.BeforeVMwareCustomization
    - 99-netcfg-vmware.yaml
    - /etc/netplan/00-installer-config.yaml

- name: configure netplan
  block:
    - set_fact:
        target_interface: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
    - name: rename {{ target_interface }} to eth0 using netplan
      block:
        - set_fact:
            mac_addr: "{{ hostvars[inventory_hostname]['ansible_' + target_interface]['macaddress'] }}"
        - debug: var=mac_addr
        - copy:
            content: |
              # Ansible managed
              network:
                ethernets:
                  eth0:
                    dhcp4: true
                    match:
                      macaddress: {{ mac_addr }}
                    optional: true
                    set-name: eth0
                version: 2
            dest: /etc/netplan/00-technis.yaml
        - command: netplan apply
  when:
    - ansible_distribution == "Ubuntu"
    - hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] != 'eth0'

- name: clean up lingering hostname entries
  lineinfile:
    path: /etc/hosts
    regex: "^127.0.0.1(.*){{ hostvars[inventory_hostname]['ansible_hostname'] }}(.*)$"
    state: absent
  when: infrastructure_provisioner != 'vagrant'

- name: set node aliases in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "127.0.0.1       {{ hostvars[inventory_hostname]['ansible_hostname'] }}.{{ lan_domain }} {{ hostvars[inventory_hostname]['ansible_hostname'] }}"
    insertbefore: BOF
  when: infrastructure_provisioner != 'vagrant'

- name: set cluster nodes aliases in /etc/hosts
  lineinfile:
    path: /etc/hosts
    regex: "^{{ hostvars[item]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}(.*)$"
    line: "{{ hostvars[item]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}      {{ hostvars[item]['ansible_hostname'] }}.{{ lan_domain }} {{ hostvars[item]['ansible_hostname'] }}"
  with_items:
    - "{{ groups.all }}"
  when: infrastructure_provisioner == 'vagrant'

- debug: var=ansible_fqdn

- name: set hostname
  shell: |
    echo "{{ inventory_hostname }}" > /etc/hostname
    hostname {{ inventory_hostname }}
    hostnamectl set-hostname {{ inventory_hostname }}

- name: disable local dns cache
  block:
  - name: disable resolved
    systemd:
      name: systemd-resolved
      state: stopped
      enabled: no
    notify: reboot host
  - name: check resolv.conf type
    stat:
      path: /etc/resolv.conf
    register: resolv
  - name: undo resolv.conf symlink
    file:
      path: /etc/resolv.conf
      state: absent
    when: resolv.stat.islnk is defined and resolv.stat.islnk

- name: disable swap in /etc/fstab
  replace:
    dest: /etc/fstab
    regexp: '^(.* swap .*)'
    replace: '#\1'

- name: disable swap
  command: swapoff -a

- name: renew dhcp lease
  command: dhclient -v

- name: deploy raspberry pi changes
  include_tasks: rpi.yaml
  when: ansible_architecture | regex_search('arm|aarch')

- name: flush handler calls for immediate effect
  meta: flush_handlers

- name: start time services
  service:
    name: systemd-timesyncd
    state: started
    enabled: yes

- name: run timedatectl status
  command: /usr/bin/timedatectl
  changed_when: False
  check_mode: no
  register: timedatectl_result

- name: copy timesyncd config
  copy:
    content: |
      [Time]
      NTP={{ common_ntp_servers | join(' ') }}
      FallbackNTP={{ common_ntp_fallback_servers | join(' ') }}
    dest: /etc/systemd/timesyncd.conf
    mode: 0644
  notify: restart timesyncd

- name: set timezone
  command: /usr/bin/timedatectl set-timezone {{ common_timezone }}
  when: common_timezone not in timedatectl_result.stdout_lines[0]
  notify: restart timesyncd

- name: enable ntp
  command: /usr/bin/timedatectl set-ntp true

- name: create ~/.ssh dir if missing
  file:
    path: ~/.ssh
    mode: 0700
    state: directory
  when:
    - ssh_public_key is defined
    - ssh_private_key is defined

- name: create ~/.ssh/authorized_keys if missing
  file:
    path: ~/.ssh/authorized_keys
    state: touch
    mode: 0600
  when: ssh_public_key is defined

- name: allow public SSH key for administration
  lineinfile:
    path: ~/.ssh/authorized_keys
    line: "{{ ssh_public_key }}"
  when: ssh_public_key is defined

- name: render SSH key for host to host
  copy:
    content: "{{ ssh_private_key }}"
    dest: ~/.ssh/id_rsa
    mode: 0600
  when: ssh_private_key is defined

- name: prohibit root password auth
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#PermitRootLogin.*"
    line: "PermitRootLogin prohibit-password"
  notify: restart ssh

- name: ensure space for local path mounts
  file:
    path: /var/lib/technis
    state: directory
    mode: 0755
    owner: 1000
    group: 1000
  run_once: yes

- name: personal touch
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: "{{ item }}"
  loop:
    - set -o vi
    - export EDITOR=vim
    - alias k=kubectl