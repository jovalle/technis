- name: apt upgrade
  block:
    - name: attempt 1st upgrade
      apt:
        upgrade: full
        update_cache: yes
        cache_valid_time: 3600
        force_apt_get: yes
        autoclean: yes
        autoremove: yes
      register: apt_upgrade
      retries: 5
      until: apt_upgrade is success
      when: apt_upgrade | default(False) | bool
  rescue:
    - name: attempt to rectify apt interruption
      shell: dpkg --configure -a
    - name: attempt 2nd upgrade
      apt:
        upgrade: full
        update_cache: yes
        cache_valid_time: 3600
        force_apt_get: yes
        autoclean: yes
        autoremove: yes
      register: apt_upgrade
      retries: 5
      until: apt_upgrade is success

- name: install common apt packages
  apt:
    name: "{{ common_packages_apt }}"
    install_recommends: false
    update_cache: yes
    cache_valid_time: 3600
    force_apt_get: yes
    autoclean: yes
    autoremove: yes
  register: apt_install_common
  retries: 5
  until: apt_install_common is success

- name: install common pip packages
  pip:
    name: "{{ common_packages_pip }}"
  register: pip_install_common
  retries: 5
  until: pip_install_common is success

- name: cleanup netplans
  file:
    path: "/etc/netplan/{{ item }}"
    state: absent
  with_items:
    - 00-installer-config.yaml
    - 00-installer-config.yaml.BeforeVMwareCustomization
    - 50-cloud-init.yaml
    - 99-netcfg-vmware.yaml

- name: get primary interface name
  set_fact:
    target_interface: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] | default('eth0') }}"

- name: configure netplan
  block:
    - name: get primary interface mac address
      set_fact:
        mac_addr: "{{ hostvars[inventory_hostname]['ansible_' + target_interface]['macaddress'] }}"
    - debug: var=mac_addr
    - name: set primary interface to eth0
      copy:
        content: |
          # Ansible managed
          network:
            ethernets:
              eth0:
                dhcp4: true
                match:
                  macaddress: {{ mac_addr }}
                optional: true
                set-name: eth0
            version: 2
        dest: /etc/netplan/00-technis.yaml
      register: netplan
    - name: apply new net config
      command: netplan apply
      when: netplan.changed
  when: target_interface != 'eth0'

- name: set hostname
  shell: |
    echo "{{ inventory_hostname }}" > /etc/hostname
    hostname {{ inventory_hostname }}
    hostnamectl set-hostname {{ inventory_hostname }}

# Fix to Cilium bug in arm64 / Ubuntu 22.04 (https://github.com/cilium/cilium/issues/18131)
- name: prepare node for Strict Reverse Path Forwarding
  block:
    - name: clear known kernel param conflicts
      lineinfile:
        path: /etc/sysctl.d/10-network-security.conf
        regex: "^net.ipv4.conf(.*).rp_filter(.*)$"
        state: absent
    - name: disable kernel params
      copy:
        dest: /etc/sysctl.d/99-cilium-cni.conf
        content: |
          net.ipv4.conf.default.rp_filter=0
          net.ipv4.conf.*.rp_filter=0
      notify: reboot host
  when: cni_plugin | default('none') == 'cilium'

- name: clean up lingering hostname entries
  lineinfile:
    path: /etc/hosts
    regex: "^127.0.0.1(.*){{ hostvars[inventory_hostname]['ansible_hostname'] }}(.*)$"
    state: absent
  when: infrastructure_provisioner | default('none') != 'vagrant'

- name: set node aliases in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "127.0.0.1 {{ hostvars[inventory_hostname]['ansible_hostname'] }}.{{ lan_domain }} {{ hostvars[inventory_hostname]['ansible_hostname'] }}"
    insertbefore: BOF
  when: infrastructure_provisioner | default('none') != 'vagrant'

- name: set cluster nodes aliases in /etc/hosts
  lineinfile:
    path: /etc/hosts
    regex: "^{{ hostvars[item]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}(.*)$"
    line: "{{ hostvars[item]['ansible_' + (default_interface | default('eth0'))]['ipv4']['address'] }}      {{ hostvars[item]['ansible_hostname'] }}.{{ lan_domain }} {{ hostvars[item]['ansible_hostname'] }}"
  with_items:
    - "{{ groups.all }}"
  when: infrastructure_provisioner | default('none') == 'vagrant'

- debug: var=ansible_fqdn

- name: disable local dns cache
  block:
    - name: disable resolved
      systemd:
        name: systemd-resolved
        state: stopped
        enabled: no
      notify: reboot host
    - name: check resolv.conf type
      stat:
        path: /etc/resolv.conf
      register: resolv
    - name: undo resolv.conf symlink
      file:
        path: /etc/resolv.conf
        state: absent
      when: resolv.stat.islnk is defined and resolv.stat.islnk

- name: disable swap in /etc/fstab
  replace:
    dest: /etc/fstab
    regexp: '^(.* swap .*)'
    replace: '#\1'

- name: disable swap
  command: swapoff -a

- name: tweak kernel
  sysctl:
    name: '{{ item.param }}'
    value: '{{ item.value }}'
    state: present
  loop:
    - { param: fs.inotify.max_queued_events, value: 16384 }
    - { param: fs.inotify.max_user_instances, value: 1280 }
    - { param: fs.inotify.max_user_watches, value: 655360 }
    - { param: kernel.pid_max, value: 131072 }

- name: renew dhcp lease
  command: dhclient -v

- name: create ~/.ssh dir if missing
  file:
    path: ~/.ssh
    mode: 0700
    state: directory
  when:
    - ssh_public_key is defined
    - ssh_private_key is defined

- name: create ~/.ssh/authorized_keys if missing
  file:
    path: ~/.ssh/authorized_keys
    state: touch
    mode: 0600
  when: ssh_public_key is defined

- name: allow public SSH key for administration
  lineinfile:
    path: ~/.ssh/authorized_keys
    line: "{{ ssh_public_key | trim }}"
  when: ssh_public_key is defined

- name: render SSH key for host to host
  copy:
    content: "{{ ssh_private_key }}"
    dest: ~/.ssh/id_rsa
    mode: 0600
  when: ssh_private_key is defined

- name: allow password atuh
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^(#*)PasswordAuthentication no"
    line: "PasswordAuthentication yes"
  notify: restart ssh

- name: allow root login
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^(#*)PermitRootLogin.*"
    line: "PermitRootLogin yes"
  notify: restart ssh

# Generate a hash via:
#   docker run --rm -it flyingprogrammer/mkpasswd -m sha-512 --rounds=4096
- name: set root password if defined
  user:
    name: root
    password: "$6$rounds=4096$aEPEL1bIDTcZ$YnEvgJKmQrHnyF.OmpdSasUjxwtqn2C1CugUUAyGq9GGI/B3Qz9CTcuj2G/L5uxNhidEd7jXynNXVzZfJm2YB."

- name: deploy raspberry pi changes
  include_tasks: rpi.yaml
  when: ansible_architecture | regex_search('arm|aarch')

- name: flush handler calls for immediate effect
  meta: flush_handlers

- name: start time services
  service:
    name: systemd-timesyncd
    state: started
    enabled: yes

- name: run timedatectl status
  command: /usr/bin/timedatectl
  changed_when: False
  check_mode: no
  register: timedatectl_result

- name: copy timesyncd config
  copy:
    content: |
      [Time]
      NTP={{ common_ntp_servers | join(' ') }}
      FallbackNTP={{ common_ntp_fallback_servers | join(' ') }}
    dest: /etc/systemd/timesyncd.conf
    mode: 0644
  notify: restart timesyncd

- name: set timezone
  command: /usr/bin/timedatectl set-timezone {{ common_timezone }}
  when: common_timezone not in timedatectl_result.stdout_lines[0]
  notify: restart timesyncd

- name: enable ntp
  command: /usr/bin/timedatectl set-ntp true

- name: personal touch
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: "{{ item }}"
  loop:
    - set -o vi
    - export EDITOR=vim
    - alias k=kubectl

- name: request reboot
  debug:
    msg: "Requesting a reboot"
  notify: reboot host
  when: reboot | default('no') | bool

- name: flush handler calls for immediate effect
  meta: flush_handlers
