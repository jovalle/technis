- name: install jsonnet
  apt:
    name: "{{ item }}"
  with_items:
    - golang
    - jsonnet

- name: get GOPATH
  command: go env GOPATH
  register: _gopath

- name: create temp dir
  tempfile:
    state: directory
  register: temp_dir

- name: deploy kube-prometheus
  block:
    - name: git clone kube-prometheus
      git:
        repo: "https://github.com/prometheus-operator/kube-prometheus.git"
        dest: "{{ temp_dir.path }}/kube-prometheus"

    - name: install go dependencies
      shell:
        cmd: go install -a "{{ item }}"
        chdir: "{{ temp_dir.path }}/kube-prometheus"
      with_items:
        - github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest
        - github.com/brancz/gojsontoyaml@latest

    - name: render jsonnet profile
      copy:
        content: |
          {
            "version": 1,
            "dependencies": [
              {
                "source": {
                  "git": {
                    "remote": "https://github.com/prometheus-operator/kube-prometheus.git",
                    "subdir": "jsonnet/kube-prometheus"
                  }
                },
                "version": "main"
              }
            ],
            "legacyImports": true
          }
        dest: "{{ temp_dir.path }}/kube-prometheus/jsonnetfile.json"

    - name: install base jsonnet library
      shell:
        cmd: |
          jb install github.com/prometheus-operator/kube-prometheus/jsonnet/kube-prometheus@main
          jb update
        chdir: "{{ temp_dir.path }}/kube-prometheus"

    - name: render setup file
      copy:
        src: "{{ role_path }}/files/main.jsonnet"
        dest: "{{ temp_dir.path }}/kube-prometheus"

    - name: generate and apply manifests
      shell:
        cmd: |
          ./build.sh main.jsonnet
          kubectl apply --server-side -f manifests/setup
          until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done
          kubectl apply -f manifests/
        chdir: "{{ temp_dir.path }}/kube-prometheus"

  environment:
    PATH: "{{ ansible_env.PATH }}:{{ _gopath.stdout }}/bin"

  always:
    - name: cleanup temp dir
      file:
        path: "{{ temp_dir.path }}"
        state: absent