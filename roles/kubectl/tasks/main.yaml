# thanks @aserhat for the inspiration
- name: "{{ source_role }} | create temp dir"
  tempfile:
    state: directory
  register: tempdir
  delegate_to: '{{ cluster_main_control_plane }}'
  run_once: yes

- name: render manifest
  block:

  - name: "{{ source_role }} | fetch manifest(s) from host"
    copy:
      src: '{{ item }}'
      dest: '{{ tempdir.path }}/{{ item }}'
    with_items:
    - '{{ target_list }}'
    when: file_type == 'static'

  - name: "{{ source_role }} | render manifest(s) onto target host"
    template:
      src: '{{ item }}.j2'
      dest: '{{ tempdir.path }}/{{ item }}'
    with_items:
    - '{{ target_list }}'
    when: file_type == 'template'

  - name: "{{ source_role }} | clean slate for manifest(s)"
    command: kubectl delete -f {{ tempdir.path }}/{{ item }}
    with_items:
      - '{{ target_list }}'
    when: (mode is defined and mode == 'replace') and (file_type == 'static' or file_type == 'template')
    ignore_errors: yes

  - name: "{{ source_role }} | {{ command | default('apply') }} manifest(s)"
    command: kubectl {{ command | default('apply') }} -f {{ tempdir.path }}/{{ item }}
    with_items:
      - '{{ target_list }}'
    when: file_type == 'static' or file_type == 'template'

  - name: "{{ source_role }} | clean slate for manifest(s)"
    command: kubectl delete -f {{ item }}
    with_items:
    - '{{ target_list }}'
    when: (mode is defined and mode == 'replace') and (file_type == 'remote')
    ignore_errors: yes

  - name: "{{ source_role }} | {{ command | default('apply') }} manifest(s)"
    command: kubectl {{ command | default('apply') }} -f {{ item }}
    with_items:
    - '{{ target_list }}'
    when: file_type == 'remote'

  - name: apply raw manifest
    shell: |
      cat <<EOF | kubectl apply -f -
      {{ raw_manifest }}
      EOF
    when: file_type == 'raw' and raw_manifest is defined

  delegate_to: '{{ cluster_main_control_plane }}'
  run_once: yes

  always:
  - name: "{{ source_role }} | clean up"
    file:
      path: '{{ tempdir.path }}'
      state: absent