---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:

  default:
    vars: &vars
      cluster: "{{.cluster}}"
    cmds:
      - task: init
      - task: apply

  fmt:
    desc: Format terraform configuration files
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    cmd: terraform fmt
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  init:
    desc: Terraform init
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    deps: ["fmt"]
    vars: *vars
    cmds:
      - terraform init
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  plan:
    desc: Terraform plan
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    deps: ["fmt"]
    vars: *vars
    cmds:
      - terraform plan
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  apply:
    desc: Terraform apply
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    deps: ["fmt"]
    vars: *vars
    cmds:
      - terraform apply
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  destroy:
    desc: Terraform destroy
    prompt: Destroy '{{.cluster}}' cluster ... are you sure?
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    deps: ["fmt"]
    vars: *vars
    cmds:
      - terraform destroy
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  force-apply:
    desc: Terraform apply without prompt
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    vars: *vars
    cmds:
      - terraform apply -auto-approve
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  force-destroy:
    desc: Terraform destroy without prompt
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    vars: *vars
    cmds:
      - terraform destroy -auto-approve
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"

  reset:
    desc: Terraform reset
    dir: '{{.ROOT_DIR}}/terraform/{{.cluster}}'
    vars: *vars
    cmds:
      - terraform destroy -auto-approve
      - terraform apply -auto-approve
    requires:
      vars: ["cluster"]
    preconditions:
      - test -d "{{.ROOT_DIR}}/terraform/{{.cluster}}"
      - test -f "{{.ROOT_DIR}}/terraform/{{.cluster}}/main.tf"
